import csv

optimal_cost = 1163
csv_file_path = 'rbg358_sa.csv'


def calculate_error(cost: int):
    return round((cost - optimal_cost) / optimal_cost * 100, 1)


data_strings = [
    "[(0.0012271,6151),(0.0022817,5990),(0.0033149,5593),(0.0042369,5389),(0.0070629,5283),(0.0089481,5117),(0.0108112,5007),(0.0137216,5002),(0.0156133,4990),(0.0165853,4912),(0.0175406,4774),(0.020541,4640),(0.022549,4590),(0.0234854,4426),(0.0254995,4376),(0.0284099,4295),(0.0341779,4207),(0.036328,4102),(0.0440908,4064),(0.0459927,4061),(0.0469996,3768),(0.0538506,3701),(0.0597364,3635),(0.0636051,3600),(0.0674481,3577),(0.0720246,3561),(0.0729429,3513),(0.0748091,3447),(0.0775551,3355),(0.0793577,3344),(0.0802147,3338),(0.083393,3311),(0.0861673,3290),(0.0906558,3269),(0.0924798,3245),(0.0934303,3242),(0.0942953,3201),(0.0960778,3173),(0.0969378,3088),(0.0998465,3010),(0.1008,2928),(0.105366,2925),(0.107225,2854),(0.1136,2836),(0.173042,2814),(0.325996,2800),(0.330384,2779),(0.333886,2726),(0.338592,2643),(0.34313,2635),(0.347511,2619),(0.350117,2602),(0.380993,2514),(0.88212,2489),(0.905003,2403),(0.917337,2335),(1.05499,2315),(1.06184,2307),(1.25689,2258),(1.72915,2214),(2.18328,2192),(4.23337,2133),(4.24748,2106),(4.25101,2099),(4.2608,2072),(6.27009,2039),(8.3835,1955),(8.65898,1923),(8.66412,1921),(18.5732,1884),(21.0734,1827),(39.9893,1787)]",
    "[(0.0010357,5921),(0.0018634,5614),(0.0042279,5305),(0.0065656,5274),(0.0073358,5101),(0.0097066,5070),(0.0112174,5058),(0.011988,5002),(0.0143151,4861),(0.0151533,4661),(0.0188011,4645),(0.0203271,4491),(0.0239357,4466),(0.0247253,4407),(0.025462,4353),(0.0261993,4305),(0.0269032,4299),(0.0283107,4218),(0.029095,4171),(0.0297856,4131),(0.0305047,4086),(0.0313243,3972),(0.0335487,3876),(0.0513314,3813),(0.052786,3765),(0.0565112,3673),(0.0618877,3655),(0.0629542,3611),(0.0674499,3605),(0.0681695,3584),(0.0688699,3571),(0.103496,3553),(0.1057,3550),(0.107819,3545),(0.122949,3538),(0.157524,3525),(0.159791,3430),(0.160586,3422),(0.162011,3323),(0.163542,3215),(0.196676,3098),(0.23601,3017),(0.252035,3010),(0.257358,2919),(0.26184,2918),(0.283754,2897),(0.284475,2851),(0.305696,2801),(0.313178,2690),(0.349941,2688),(0.350753,2602),(0.500368,2571),(0.517764,2554),(0.523286,2523),(0.531557,2475),(0.546555,2391),(0.665868,2382),(1.03414,2322),(1.26263,2294),(1.43493,2258),(1.43648,2168),(2.14691,2154),(2.15056,2148),(2.1725,2133),(2.17636,2109),(2.65009,2091),(2.73397,2072),(2.73629,2071),(3.10483,2059),(3.24532,2058),(5.67598,2047),(5.68398,2031),(8.09703,2025),(8.29614,2022),(8.4748,2020),(8.48005,2013),(8.50389,1994),(9.38394,1953),(18.6395,1943),(18.6403,1917),(25.1214,1915),(40.9734,1914),(49.4154,1903),(54.1517,1884),(57.0422,1871),(63.5193,1837)]",
    "[(0,1812),(0.148498,1810),(0.14854,1807),(0.148652,1805),(0.148822,1802),(0.149066,1793),(0.149075,1792),(0.149714,1789),(0.149972,1786),(0.150047,1781),(0.150189,1779),(0.15027,1777),(0.150711,1775),(0.150911,1772),(0.150935,1770),(0.150946,1766),(0.151098,1765),(0.151311,1764),(0.151369,1760),(0.151889,1749),(0.152177,1739),(0.153215,1738),(0.153325,1737),(0.153806,1736),(0.153956,1735),(0.153965,1734),(0.154423,1725),(0.155039,1722),(0.155128,1721),(0.155677,1720),(0.156431,1719),(0.15688,1714),(0.157438,1713),(0.15864,1710),(0.159102,1701),(0.159241,1700),(0.15962,1696),(0.16047,1690),(0.160556,1688),(0.161255,1686),(0.161341,1685),(0.161441,1684),(0.162008,1683),(0.163713,1681),(0.163976,1673),(0.164613,1672),(0.165229,1662),(0.165493,1659),(0.167016,1658),(0.167076,1650),(0.167259,1648),(0.16759,1647),(0.167753,1646),(0.168701,1636),(0.168792,1632),(0.169832,1623),(0.169867,1622),(0.170094,1618),(0.170748,1617),(0.170937,1614),(0.17206,1612),(0.174044,1611),(0.175158,1609),(0.175665,1608),(0.177671,1604),(0.178041,1602),(0.180079,1601),(0.180231,1599),(0.180726,1598),(0.181034,1588),(0.181368,1587),(0.181868,1582),(0.181909,1578),(0.182336,1577),(0.183692,1572),(0.184625,1571),(0.185253,1563),(0.186364,1562),(0.186396,1560),(0.186425,1559),(0.187967,1551),(0.188956,1543),(0.189019,1542),(0.190787,1541),(0.190874,1537),(0.19165,1536),(0.192996,1528),(0.193257,1527),(0.194198,1523),(0.194488,1521),(0.19451,1519),(0.195141,1509),(0.197919,1508),(0.198009,1500),(0.198485,1498),(0.210102,1492),(0.211342,1491),(0.211481,1488),(0.211525,1485),(0.215202,1483),(0.216905,1478),(0.217028,1477),(0.2263,1475),(0.232791,1473),(0.237882,1472),(0.240647,1471),(0.240747,1469),(0.240769,1468),(0.24303,1463),(0.243566,1460),(0.245091,1451),(0.248888,1450),(0.248957,1448),(0.254967,1447),(0.257779,1443),(0.259012,1436),(0.260107,1434),(0.261276,1423),(0.261592,1422),(0.268954,1417),(0.271502,1416),(0.273389,1415),(0.274788,1404),(0.274976,1403),(0.279367,1402),(0.27993,1395),(0.280741,1394),(0.284955,1384),(0.289897,1383),(0.291543,1382),(0.292175,1375),(0.295218,1374),(0.303642,1370),(0.305626,1369),(0.312534,1364),(0.319484,1363),(0.324457,1361),(0.325022,1359),(0.344739,1352),(0.350113,1351),(0.355092,1345),(0.359435,1341),(0.424851,1338),(0.441797,1334),(0.455085,1331),(0.471885,1330),(0.473876,1325),(0.48826,1317),(0.490028,1311),(0.507981,1305),(0.525853,1296),(0.541363,1295),(0.545387,1292),(0.598978,1290),(0.654453,1289),(0.688555,1287),(0.746424,1286),(0.761996,1285),(0.806686,1284),(0.823868,1283),(0.925547,1282),(0.946261,1281),(0.972173,1280),(0.977232,1279),(1.06071,1271),(1.07525,1267),(1.09792,1261),(1.12599,1260),(1.15351,1252),(1.2545,1247),(1.26765,1245),(1.42848,1239),(1.62742,1238),(1.65512,1236),(1.68652,1235),(1.78764,1231),(1.80352,1230),(1.86527,1229),(1.92627,1228),(2.17328,1227),(2.78532,1226),(2.89216,1225),(3.30626,1221),(3.8375,1220),(4.02106,1218),(4.04131,1214),(4.10413,1213),(4.46743,1211),(6.85668,1207),(10.3156,1206),(12.9888,1205),(16.6285,1203),(16.9897,1202),(17.5863,1201),(17.6164,1199),(17.9183,1198),(18.1834,1192),(18.5139,1191),(360, 1195)]"
]

data_lists = [eval(data_string) for data_string in data_strings]

for neighbour in data_lists:
    for i in range(len(neighbour)):
        first, second = neighbour[i]
        modified_second = calculate_error(second)
        neighbour[i] = (first, modified_second)

print(data_lists)

max_length = max(len(lst) for lst in data_lists)

with open(csv_file_path, 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)

    for i in range(max_length):
        row = []
        for lst in data_lists:
            if i < len(lst):
                row.extend(lst[i])
            else:
                row.extend(["", ""])
        writer.writerow(row)
